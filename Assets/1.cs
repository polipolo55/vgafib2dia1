//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @_1: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @_1()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""1"",
    ""maps"": [
        {
            ""name"": ""33"",
            ""id"": ""133348e7-8b75-4a3a-a854-f3ecfda7d00d"",
            ""actions"": [
                {
                    ""name"": ""dir"",
                    ""type"": ""Value"",
                    ""id"": ""9086d56a-7d06-4b0c-84f8-964d6ecb741d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""8366544e-73f9-4662-b604-90b287fdc232"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""shoot"",
                    ""type"": ""Button"",
                    ""id"": ""c0dd4cc7-98b6-45d5-bbb8-71462395028a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd"",
                    ""id"": ""b6db3b15-b2cd-441c-b23b-787d85c425c8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""23aa9495-6272-4672-9e6a-520a9a4c6d11"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b80da3fd-4310-41d8-997d-cab87887c4fd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ec420fbe-d733-44a8-94b6-53ab78a6a9b2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1de1db72-f821-4279-ae16-3eb1dee45240"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""dir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""feeb5679-8cf1-4b61-9e4d-aa5999e6bb86"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.2,y=0.2)"",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eac553fc-310c-40a5-adb4-d721860c1a14"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // 33
        m__33 = asset.FindActionMap("33", throwIfNotFound: true);
        m__33_dir = m__33.FindAction("dir", throwIfNotFound: true);
        m__33_Rotate = m__33.FindAction("Rotate", throwIfNotFound: true);
        m__33_shoot = m__33.FindAction("shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // 33
    private readonly InputActionMap m__33;
    private List<I_33Actions> m__33ActionsCallbackInterfaces = new List<I_33Actions>();
    private readonly InputAction m__33_dir;
    private readonly InputAction m__33_Rotate;
    private readonly InputAction m__33_shoot;
    public struct _33Actions
    {
        private @_1 m_Wrapper;
        public _33Actions(@_1 wrapper) { m_Wrapper = wrapper; }
        public InputAction @dir => m_Wrapper.m__33_dir;
        public InputAction @Rotate => m_Wrapper.m__33_Rotate;
        public InputAction @shoot => m_Wrapper.m__33_shoot;
        public InputActionMap Get() { return m_Wrapper.m__33; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_33Actions set) { return set.Get(); }
        public void AddCallbacks(I_33Actions instance)
        {
            if (instance == null || m_Wrapper.m__33ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__33ActionsCallbackInterfaces.Add(instance);
            @dir.started += instance.OnDir;
            @dir.performed += instance.OnDir;
            @dir.canceled += instance.OnDir;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @shoot.started += instance.OnShoot;
            @shoot.performed += instance.OnShoot;
            @shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(I_33Actions instance)
        {
            @dir.started -= instance.OnDir;
            @dir.performed -= instance.OnDir;
            @dir.canceled -= instance.OnDir;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @shoot.started -= instance.OnShoot;
            @shoot.performed -= instance.OnShoot;
            @shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(I_33Actions instance)
        {
            if (m_Wrapper.m__33ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_33Actions instance)
        {
            foreach (var item in m_Wrapper.m__33ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__33ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _33Actions @_33 => new _33Actions(this);
    public interface I_33Actions
    {
        void OnDir(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
